#! /usr/bin/python3
import time
def tri_insert(A,n):
  """trier une liste A de n elements"""
  for i in range(1,n):
    key=A[i]
    j=i-1
    while key < A[j] and j >= 0:
      A[j+1]=A[j]
      j=j-1
    A[j+1]=key
  return(A)

def insert_in(A,n):
  """ inserer un element n dans une liste A / recursivitÃ© 101"""
  if A==[]:
    return([n])
  if A[0]>n:
    return([n]+A)
  else:
    return([A[0]]+insert_in(A[1:],n))

def triInsert_rec(A) :
  """trier une liste A de n elements"""
  AT=[]
  for n in A :
    AT=insert_in(AT,n)
  return(AT)

def triInsert_rec2(A1,A2):
  if A1==[]:
    return(A2)
  else:
    return(triInsert_rec2(A1[1:], insert_in(A2,A1[0])))
#attention aux arguments
#faux

def fusionner(A1,A2):
  A3=[]
  j=0
  i=0
  while A1!=[] and A2!=[]:
    if A1[i]<=A2[j]:
      A3+=[A1[0]]
      del A1[0]
    else:
      A3+=[A2[0]]
      del A1[0]
    return (A3+A1+A2)

def fusionne(A1,A2):
  A3=[]
  j=0
  i=0
  while i<len(A1) and j<len(A2):
    if A1[i]<=A2[j]:
      A3+=[A1[i]]
      i=i+1
    else:
      A3+=[A2[j]]
      j=j+1
  return(A3+A1[i :]+A2[j :])
#(soit A1[i :] est la liste vide soit l'autre est la liste vide)

def fusionnera(a,b) :
  if a==[] or b==[] :
    return(a+b)
  elif a[0] <= b[0] :
    return ([a[0]]+fusionner(a[1:],b))
  else :
    return([b[0]]+fusionner(a,b[1:]) )

def split_concat(A):
  if len(A)==0:
    return([])
  else:
    new=A[0]
  return([[new]]+split_concat(A[1:]))

def tri_fusion(l):
  if len(l) <= 1:
    return(l)
  else:
    q=len(l)//2
    l1=tri_fusion(l[:q])
    l2=tri_fusion(l[q:])
  return(fusionne(l1,l2))
  
     
  
    
#print(tri_insert([1,3,2],3))
#print(insert_in([],0))
#print(triInsert_rec([1,3,2]))
#
#print(fusionner([1,2,3],[4,5,6]))
#print(fusionne([1,2,3,4],[5,6]))
#print(fusionnera([1,2,3,4,5,6],[7,8,9,10,11,12,13]))
a=time.time()
triInsert_rec2([1,3,6],[1,2,3])
b=time.time()
print(b-a)
c=time.time()
tri_fusion([3,1,0,4,8,6])
d=time.time()
print(d-c)
#print(tri_fusion([3,1,0,4,8,6,5,4]))
#print(split_concat([1,2,3,4,5]))

